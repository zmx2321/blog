(window.webpackJsonp=window.webpackJsonp||[]).push([[648],{1328:function(t,r,n){"use strict";n.r(r);var o=n(26),v=Object(o.a)({},(function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"什么是事件委托"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件委托"}},[t._v("#")]),t._v(" 什么是事件委托")]),t._v(" "),n("ClientOnly",[n("Valine")],1),t._v(" "),n("p",[n("strong",[n("font",{attrs:{color:"#009688",size:"3",face:"微软雅黑"}},[t._v("\n概述：\n")])],1),n("br"),t._v("\n事件委托它还有一个名字叫事件代理，JavaScript高级程序设计上讲："),n("br"),t._v("\n事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。那这是什么意思呢？网上的各位大牛们讲事件委托基本上都用了同一个例子，就是取快递来解释这个现象，我仔细揣摩了一下，这个例子还真是恰当，我就不去想别的例子来解释了，借花献佛，我摘过来，大家认真领会一下事件委托到底是一个什么原理： 有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。"),n("br")]),t._v(" "),n("p",[t._v("这里其实还有2层意思的：")]),t._v(" "),n("ul",[n("li",[t._v("第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；")]),t._v(" "),n("li",[t._v("第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。"),n("br")])]),t._v(" "),n("p",[n("strong",[n("font",{attrs:{color:"#009688",size:"3",face:"微软雅黑"}},[t._v("\n为什么要用事件委托:\n")])],1),n("br"),t._v("\n一般来说，dom需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的dom需要添加事件处理呢？比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件，那这么做会存在什么影响呢？"),n("br")]),t._v(" "),n("p",[t._v("在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；"),n("br")]),t._v(" "),n("p",[t._v("每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了")]),t._v(" "),n("p",[n("strong",[n("font",{attrs:{color:"#009688",size:"3",face:"微软雅黑"}},[t._v("\n事件委托的原理:\n")])],1),n("br"),t._v("\n事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div>ul>li>a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a>li>ul>div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。")]),t._v(" "),n("hr"),t._v(" "),n("br"),t._v(" "),n("p",[n("font",{attrs:{color:"#666",size:"5"}},[t._v("~End~")])],1)],1)}),[],!1,null,null,null);r.default=v.exports}}]);